plugins {
	id 'java'
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'pl.allegro.tech.build.axion-release' version '1.12.0'
	id 'com.palantir.docker' version '0.25.0'
	id 'com.palantir.docker-run' version '0.25.0'
	id 'com.palantir.docker-compose' version '0.25.0'
	id 'jp.classmethod.aws.cloudformation' version '0.41'
}

version = scmVersion.version
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.flywaydb:flyway-core'
	implementation "org.mapstruct:mapstruct:1.3.1.Final"
	compileOnly 'org.projectlombok:lombok'
//	runtimeOnly 'org.postgresql:postgresql'
	compile("com.h2database:h2:1.4.191")
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"

	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

//	compile 'ch.qos.logback:logback-classic:1.2.3'
//	compile 'ch.qos.logback.contrib:logback-json-core:0.1.5'
//	compile 'org.slf4j:slf4j-api:1.7.25'

	compile 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtime 'io.jsonwebtoken:jjwt-impl:0.11.2',
			'io.jsonwebtoken:jjwt-jackson:0.11.2'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}

String dockerHubUsername = 'kilev'
String imageName = "${dockerHubUsername}/${project.name}:${version}"

docker {
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
	name project.name
	image imageName
	ports '8080:8080'
	clean true
}

aws {
	region = findProperty('awsRegion') ?: 'us-east-2'
}

cloudFormation {
	stackName "$project.name-stack"
	stackParams([
			SubnetID: findProperty('subnetId') ?: '',
			ServiceName: project.name,
			ServiceVersion: version,
			DockerHubUsername: dockerHubUsername
	])
	templateFile project.file("ecs.yml")
}
